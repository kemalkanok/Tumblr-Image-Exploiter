#general installer for tumblr
import json , os
class bcolors:
    HEADER = '\033[95m'
    OKBLUE = '\033[94m'
    OKGREEN = '\033[92m'
    WARNING = '\033[93m'
    FAIL = '\033[91m'
    ENDC = '\033[0m'

class installer():
 	"""docstring for installer"""
 	def __init__(self):
 		self.prepareData()
 		self.getLists()
 		self.getForce()
 		self.getProxy()
 		# self.writeConfig()
 		print self.data
 		pass

 	def getProxy(self):
 		ans = raw_input("need proxy ("+bcolors.WARNING+"n"+bcolors.ENDC+")[y/n]:")
 		if ans not in ["n","N",""]:
	 		self.data["proxy"]={};
	 		ans = raw_input("proxy type("+bcolors.WARNING+"socks5"+bcolors.ENDC+")[socks5]:")
	 		if ans == "":
	 			self.data["proxy"]["type"]= "socks5"
	 		else:
	 			self.data["proxy"]["type"]= ans
	 		ans = raw_input("proxy host("+bcolors.WARNING+"null"+bcolors.ENDC+"):")
	 		self.data["proxy"]["host"]=(ans)
	 		ans = raw_input("proxy port("+bcolors.WARNING+"port"+bcolors.ENDC+"):")
	 		self.data["proxy"]["port"]=int(ans)
	 		ans = raw_input("proxy username("+bcolors.WARNING+"null"+bcolors.ENDC+"):")
	 		self.data["proxy"]["username"]=ans
	 		ans = raw_input("proxy password("+bcolors.WARNING+"null"+bcolors.ENDC+"):")
	 		self.data["proxy"]["password"]=ans
 		pass

 	def getForce(self):
 		ans = raw_input("force download("+bcolors.WARNING+"1"+bcolors.ENDC+"):")
 		if ans == 0:
 			self.data["force"] = 0
 		else:
 			self.data["force"] = 1
 		pass

 	def getLists(self):
 		get = self.getList()
 		while get  != "":
 			if get in self.data["downloads"]["list"]:
 				print "tumblr subdomain "+bcolors.WARNING+"existed "+bcolors.ENDC+" will not added"
 			else:
	 			self.data["downloads"]["list"].append(get)
	 		get = self.getList()
		pass

	def getList(self):
		return raw_input("tumblr subdomain("+bcolors.WARNING+"null"+bcolors.ENDC+"):")
		pass

	def prepareData(self):
		self.path = "config.json";
		self.data = {
			"downloads":{
				"list":[]
			},
			"force":0
		}		
		pass

	def dumpdata(self):
		return json.dumps(self.data)
		pass

	def writeConfig(self):
		f = open(self.path,'wb')
		f.write(self.dumpdata())
		f.close()
		pass

installer()
# f = open(JSONEncoder().encode(path),'wb')
# f.write(data)
# f.close()